# Script python that permit to export a rigid body object from the selected mesh

#!BPY

"""
Name: 'RigidBodies (.xs3)...'
Blender: 232
Group: 'Export'
Tooltip: 'Save a Rigid Body XS3 File'
"""

__author__ = "Fonteneau Sylvere"
__url__ = ["blender", "elysiun"]
__version__ = "0.1"

__bpydoc__ = """\
This script is an exporter to XS3 file format.

Usage:

Run this script from "File->Export" menu to export one mesh
"""

import Blender
from Blender import *

import math
from math import *

import array
from array import *

#==================================================#
# New name based on old with a different extension #
#==================================================#
def newFName(ext):
  return Get('filename')[: -len(Get('filename').split('.', -1)[-1]) ] + ext

objects = Blender.Object.GetSelected()

def min (min, val):
	if (val < min):
		return val;
	return min
	#print ("dans la fonction Min = " + `min`)

def max (max, val):
	if (val > max):
		return val
	return max
	#print ("Max = " + `max`)

def vecUnit (v):
	norm = (v[0] * v[0] + v[1] * v[1] + v[2] * v[2])
	vecUnit = array('f', [0.0, 0.0, 0.0])
	if (norm <> 0):
		norm = 1.0 / sqrt(norm)
		for i in range (3):
			vecUnit[i] = v[i] * norm
	return vecUnit

def quatMult (q1, q2):
	q3 = array('f', [0.0, 0.0, 0.0, 0.0])
	q3[3] = q1[3] * q2[3] -(q1[0] * q2[0] + q1[1] * q2[1] + q1[2] * q2[2]) 	
	q3[0] = q1[3] * q2[0] + q1[0] * q2[3] + q1[1] * q2[2] - q1[2] * q2[1]	
	q3[1] = q1[3] * q2[1] + q1[1] * q2[3] + q1[2] * q2[1] - q1[0] * q2[2] 	
	q3[2] = q1[3] * q2[2] + q1[2] * q2[3] + q1[0] * q2[0] - q1[1] * q2[0] 	
	
	return q3
	
def rotToQuat (u, angle):
	quat = array('f', [0.0, 0.0, 0.0, 0.0])
	vNorm = vecUnit (u)
	sn = sin (angle)
	quat[0] = sn * vNorm[0]
	quat[1] = sn * vNorm[1]
	quat[2] = sn * vNorm[2]	
	quat[3] = cos (angle)
	
	return quat

def computeQuat (object):
	rot = object.rot
	vect = array('f', [1.0, 0.0, 0.0])
	quatX = rotToQuat (vect, rot[0])
	vect[0] = 0.0
	vect[1] = 1.0
	quatY = rotToQuat (vect, rot[1])
	vect[1] = 0.0
	vect[2] = 1.0
	quatZ = rotToQuat (vect, rot[2])
	quat = quatMult(quatX, quatY)
	
	return quatMult(quat, quatZ)	

def computeLocation (object):
	return object.loc	
	
def computeInertia (object):		
	#for i in range(len(objects)):
	vertexList = NMesh.GetRawFromObject(object.getName()).verts
	minx = vertexList[0].co[0]
	maxx = vertexList[0].co[0]
	miny = vertexList[0].co[1]
	maxy = vertexList[0].co[1]
	minz = vertexList[0].co[2]
	maxz = vertexList[0].co[2]
		
	for vertex in vertexList:	
		minx = min (minx, vertex.co[0])
		maxx = max (maxx, vertex.co[0])
		miny = min (miny, vertex.co[1])			
		maxy = max (maxy, vertex.co[1])
		minz = min (minz, vertex.co[2])
		maxz = max (maxz, vertex.co[2])
		
	width  = sqrt ((maxx - minx) * (maxx - minx))
	height = sqrt ((maxy - miny) * (maxy - miny))
	length = sqrt ((maxz - minz) * (maxz - minz))
	#print ("Width = " + `width` + ", Height = " + `height` + ", Length = " + `length`)

	inertia = array ('f')
		
	for i in range (9):
		inertia.append(0)
	
	if (object.getName() == 'Sphere'):
		print ("Creating inertia Matrix of a Sphere")
		for i in range (3):
			inertia [i * 4] = 2 * width * width / 5	
	
	if (object.getName() == 'Cube'):
		print ("Creating inertia Matrix of a Cube")
		inertia[0] = ((width * width) + (height * height)) / 12
		inertia[4] = ((length * length) + (height * height)) / 12
		inertia[8] = ((length * length) + (width * width)) / 12

	return inertia
		
def saveRigid (filename):
	gravity = [0.0, 0.0, 0.0]
	viscosity = 0.25
	step = 0.01
	mass = 10
		
	quat = computeQuat(objects[0])
	inertia = computeInertia (objects[0])
	center = computeLocation (objects[0])
	
	file = open(filename, "w")
	file.write ('Xsp 3.0\n')
	file.write ('# Rigid object generated by a Rigid Export blender script\n')
	
	file.write ('grav %f %f %f\n' % (gravity[0], gravity[1], gravity[2]))
	file.write ('visc %f\n' % (viscosity))
	file.write ('step %f\n'% (step))
	file.write ('mass %f\n' % (mass))
	file.write ('inrt %f %f %f %f %f %f %f %f %f\n' % (inertia[0], inertia[1], inertia[2], inertia[3], inertia[4], inertia[5], inertia[6], inertia[7], inertia[8]))
	file.write ('cntr %f %f %f\n' % (center[0], center[1], center[2]))
	file.write ('frme %f %f %f %f\n' % (quat[0], quat[1], quat[2], quat[3]))
	
	file.close()
	
Window.FileSelector (saveRigid, 'Export Rigid Obj', newFName('xs3'))
