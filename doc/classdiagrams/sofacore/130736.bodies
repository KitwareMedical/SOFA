class ComponentLibrary
!!!144944.cpp!!!	ComponentLibrary(in componentN : std::string, in categoryN : std::string, inout e : ClassEntry, in exampleFiles : std::vector< std::string >)

	description  = std::string("<H2>")  + entry->className + std::string(": ");
	  
	std::vector< std::string > possiblePaths;
	for (std::set< std::string >::iterator it=entry->baseClasses.begin(); it!=entry->baseClasses.end() ;it++)
	  {
	    if (it != entry->baseClasses.begin()) description += std::string(", ");
	    description += (*it);
	  }

        //Find a scene 
        std::string nameComponentCaseInsensitive = caseInsensitive(entry->className);

        for (unsigned int i=0;i<exampleFiles.size();++i) 
          {
            std::string exampleCaseInsensitive = caseInsensitive(exampleFiles[i]);
//             if (exampleFiles[i].findRev(entry->className.c_str()) >= 0 )
            if (exampleCaseInsensitive.find(nameComponentCaseInsensitive) != std::string::npos)
              possiblePaths.push_back(exampleFiles[i]);
          }

	std::string nameSpace = sofa::core::objectmodel::Base::decodeNamespaceName(entry->creatorList.begin()->second->type());
	

	description += std::string("</H2>");

	description += std::string("<ul>");

	description += std::string("<li><b>Description: </b>") + entry->description + std::string("</li>");


	if (!nameSpace.empty())
	  description += std::string("<li><b>NameSpace: </b>")+nameSpace +std::string("</li>");
	if (!entry->authors.empty())
	  description += std::string("<li><b>Authors: </b>")+entry->authors +std::string("</li>");
	if (!entry->license.empty())
	  description += std::string("<li><b>License: </b>") + entry->license + std::string("</li>");

	if (possiblePaths.size() != 0)	 
          {   
            description += std::string("<li><b>Example: </b><ul>");
            for (unsigned int i=0;i<possiblePaths.size();++i)
              {
                description += std::string("<li><a href=\"")+possiblePaths[i]+std::string("\">") + possiblePaths[i] + std::string("</a></li>");
              }
            description += std::string("</ul>");
          }

	description += std::string("</ul>");
!!!145200.cpp!!!	addTemplate(in nameT : std::string) : void
        
        if (nameT.empty()) return;
        templateName.push_back(nameT);
