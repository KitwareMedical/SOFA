<MACRO all>
__METHODNAME(){_Sphere}
</MACRO>

<MACRO float>
_TYPES_()
{
	typedef float Real;
	typedef float4 Real4;
	typedef float4 IDATA_TYPE;
}
</MACRO>

<MACRO double>
_TYPES_()
{
	#pragma OPENCL EXTENSION cl_khr_fp64: enable
	typedef double Real;
	typedef double4 Real4;
	typedef double4 IDATA_TYPE;
}
</MACRO>

<MACRO all>
_DEF_()
{
//	#define BSIZE 32
}
</MACRO>

<MACRO all>
__INPUTS_AddForce__()
{
	Real4 sphereCenter,
	Real4 sphereData
}
</MACRO>

<MACRO all>
__INPUTS_AddDForce__()
{
	Real4 sphereCenter,
	Real sphereStiffness
}
</MACRO>

<MACRO all>
__OP_AddForce__()
{
	Real4 dp=xi - sphereCenter;
	Real d2 = dot(dp,dp);

	if (d2 <  sphereData.x* sphereData.x)	//(d2<sphere.r*sphere.r)
	{
		Real length = sqrt(d2);
		Real inverseLength = 1/length;
		dp.x *= inverseLength;
		dp.y *= inverseLength;
		dp.z *= inverseLength;
		d2 = -sphereData.x*inverseLength;	//d2 = -sphere.r*inverseLength;
		Real d = sphereData.x - 1/inverseLength;

		Real forceIntensity = sphereData.y*d;		//sphere.stiffness*d;
		Real dampingIntensity = sphereData.z*d;	//sphere.damping*d;
		force = dp*forceIntensity - vi*dampingIntensity;
	}

	dp.w=d2;
	IDATA_NAME = dp;
}
</MACRO>


<MACRO all>
__OP_AddDForce__()
{
	Real4 d = IDATA_NAME;

	if (d.w<0)
	{
		float4 dp = (float4)(d.x, d.y, d.z, 0);
		dforce = sphereStiffness*(dot(dxi,dp)*d.w * dp - (1+d.w) * dxi);
	}
}
</MACRO>



