########################################################################
# SOFA Compilation Configuration
########################################################################

# Uncomment to activate internal in-development codes put inside SOFA_DEV blocks
# DEFINES += SOFA_DEV

# Uncomment SOFA_RELEASE to restrict compilation to to-be-released codes
# DEFINES += SOFA_RELEASE

########################################################################
# Type used in SOFA: if none specified, both will be available
########################################################################

# Uncomment if you want to compile Sofa using only float
# DEFINES += SOFA_FLOAT

# Uncomment if you want to compile Sofa using only double
# DEFINES += SOFA_DOUBLE


########################################################################
# Viewers
########################################################################

!isEmpty(QT): DEFINES += SOFA_QT4

# Uncomment if you want to compile Qt interface
DEFINES += SOFA_GUI_QTVIEWER

# Uncomment if you want to compile QGLViewer interface
# DEFINES += SOFA_GUI_QGLVIEWER

# Uncomment if you want to compile GLUT interface
DEFINES += SOFA_GUI_GLUT

# Uncomment if you want to enable interactionmode
# DEFINES += SOFA_GUI_INTERACTION


########################################################################
# Options
########################################################################

#DEFINES += SOFA_PROJECT_runUnitTests  # uncomment to compile a project which perform low-level tests on Sofa classes

# Uncomment if you want to hide the recorder from the Qt GUI to save space
# DEFINES += SOFA_GUI_QT_NO_RECORDER

# Uncomment if you want to hide the data help text from the Qt GUI to save space
# DEFINES += SOFA_GUI_QT_NO_DATA_HELP

# Uncomment if you want to use RTDSC processor cycle-counter for timing
# Note: this is the fastest and most precise method but have issues on
# multi-CPUs or with varying CPU frequencies
# DEFINES += SOFA_RDTSC

# Uncomment if you want to support MASS under mappings
DEFINES += SOFA_SUPPORT_MAPPED_MASS

# Uncomment if you want to support computing mechanical matrices taking cCompressed Row Sparse matrix into account
# DEFINES += SOFA_SUPPORT_CRS_MATRIX

# Uncomment if you want to use MechanicalState masks by default, instead of only when useMask="true" is set
# This can reduce computations in mappings to collision models, but it complicates visitors and solvers and may introduce hard to understand bugs...
# DEFINES += SOFA_USE_MASK_BY_DEFAULT

# Uncomment if you want to use Collada support
# DEFINES += SOFA_HAVE_COLLADADOM

!contains(DEFINES, SOFA_XML_PARSER_LIBXML){
# Uncomment if you want to have the possibility to trave the visitor execution
DEFINES += SOFA_DUMP_VISITOR_INFO
}

# Uncomment if you want to use csparse
# DEFINES += SOFA_HAVE_CSPARSE

# Uncomment if you want to disable vector access failure assertions (WIN32 Debug optimization)
# DEFINES += SOFA_NO_VECTOR_ACCESS_FAILURE

# Uncomment if you want to disable bounding boxes recomputation at each timestep
# DEFINES += SOFA_NO_UPDATE_BBOX

contains(DEFINES,SOFA_DEV){ # BEGIN SOFA_DEV

# Uncomment if you want to support moving frames when computing inertia forces in Mass
# DEFINES += SOFA_SUPPORT_MOVING_FRAMES

# Uncomment if you want to use indexedmap
# DEFINES += SOFA_HAVE_INDEXEDMAP

} # END SOFA_DEV

########################################################################
# External Libraries
########################################################################

# Uncomment if you want to use ZLIB to handle compressed files
DEFINES += SOFA_HAVE_ZLIB

# Uncomment if you want to use libPNG to read/write PNG images
DEFINES += SOFA_HAVE_PNG

# Uncomment if you want to use GLEW to handle OpenGL extensions
DEFINES += SOFA_HAVE_GLEW

# Uncomment if you want to use FlowVR / FlowVR Render for distributed computing
# DEFINES += SOFA_HAVE_FLOWVR

# Uncomment if you want to use Boost lib for multithread computing
# DEFINES += SOFA_HAVE_BOOST
# On mac, we often need the suffix -mt
# BOOST_SUFFIX = -mt
# On Windows, the path where boost is install and the suffix of the dlls should be specified
# BOOST_ROOT = "C:\Code\boost\boost_1_46_1"
# BOOST_SUFFIX = -vc90-mt-1_46_1

# Uncomment if you want Python scripting support in sofa
# DEFINES += SOFA_HAVE_PYTHON

# Uncomment if you want to use EIGEN2 for Matrix Solvers
 DEFINES += SOFA_HAVE_EIGEN2

# Uncomment if you want to use MKL for Matrix Solvers
# DEFINES += SOFA_HAVE_MKL
# MKL_PATH = "C:\Progra~1\Intel\MKL\9.1.027"
# Uncomment if you want to use the Parallel version of Sofa (require KAAPI http://kaapi.gforge.inria.fr/)
# DEFINES += SOFA_SMP
# Enables linking with kaapi without activating SOFA_SMP code
# DEFINES += SOFA_HAVE_KAAPI

# Activate multithreading support (requires SOFA_HAVE_BOOST)
# DEFINES += SOFA_MAX_THREADS=3

# Uncomment if you want to debug multithreading support
# DEFINES += SOFA_DEBUG_THREAD

# Uncomment if you want to use LibXML instead of built-in TinyXML
# DEFINES += SOFA_XML_PARSER_LIBXML

contains(DEFINES,SOFA_XML_PARSER_LIBXML){
# Uncomment if you want to use SofaPML to load PML and LML files
# DEFINES += SOFA_PML
}

# Uncomment if you want to use METIS
# Note that it is not bundled with SOFA and must be installed first
# DEFINES += SOFA_HAVE_METIS

contains(DEFINES,SOFA_DEV){ # BEGIN SOFA_DEV

# Uncomment if you want to use the METIS version provided in extlibs
# DEFINES += SOFA_EXTLIBS_METIS
} # END SOFA_DEV

# Uncomment if you want to use TAUCS (C library of sparse linear solvers)
# Note that it is not bundled with SOFA and must be installed first
# DEFINES += SOFA_HAVE_TAUCS

contains(DEFINES,SOFA_DEV){ # BEGIN SOFA_DEV

# Uncomment if you want to use the TAUCS version provided in extlibs
# Note that you need to activate METIS in order to use TAUCS
# See https://wiki.sofa-framework.org/wiki/TAUCS
# DEFINES += SOFA_EXTLIBS_TAUCS
} # END SOFA_DEV

# Uncomment if you want to use TAUCS Multi thread (C library of sparse linear solvers) provided in extlibs
# The difference with the previous library (you can use both) is that this library is thread safe 
# DEFINES += SOFA_EXTLIBS_TAUCS_MT

# uncomment if you wan to use TAUCS with CILK
# CILK is not include in sofa, and you need to install it see : http://supertech.lcs.mit.edu/cilk/
# DEFINES += SOFA_HAVE_CILK

# Uncomment if you want to use PARDISO (Parallel Sparse Direct Solver Project) http://www.pardiso-project.org/
# Note that it is not bundled with SOFA and must be installed first
# DEFINES += SOFA_HAVE_PARDISO
# Specify the name of the library to use and its path if necessary
# SOFA_EXT_LIBS *= -lpardiso400_GNU432_IA32
# SOFA_EXT_LIBS *= -lpardiso400_GNU430_IA64
# SOFA_EXT_LIBS *= -lpardiso400_GNU430_AMD_IA64
# For the multithreaded version you also need to activate OpenMP
# QMAKE_LFLAGS *= -fopenmp
# QMAKE_CXXFLAGS_RELEASE *= -fopenmp

# Uncomment if you want to use fishpack support
# DEFINES += SOFA_HAVE_FISHPACK
# FISHPACK_FLAGS = intel

# If you want to use BLAS/LAPACK (required by TAUCS), uncomment the correct libraries and macros depending on your system
# DEFINES += SOFA_HAVE_BLAS
# BLAS_LIBS *= -lblas -llapack -lf2c
# BLAS_LIBS *= -llibgoto2 -llapack -llibf2c
# BLAS_DEFINES *= TAUCS_BLAS_UNDERSCORE
# BLAS_DEFINES *= TAUCS_BLAS_NOUNDERSCORE

# Uncomment if you want to use muparser support
# DEFINES += MUPARSER

# Uncomment if you want to use cgal (not included, see wiki)
# DEFINES += SOFA_HAVE_CGAL

# Uncomment if you want to use opencv (not included)
# DEFINES += SOFA_HAVE_OPENCV
# SOFA_OPENCV_PATH = /usr

# Uncomment if you want to use FFMPEG
# Note that it is not bundled with SOFA and must be installed first
# DEFINES += SOFA_HAVE_FFMPEG

# Uncomment if you want to use FFMPEG version included in extlibs
# DEFINES += SOFA_EXTLIBS_FFMPEG

# Uncomment if you want to have continuous collision detection support
# DEFINES += SOFA_HAVE_DCCD

# Uncomment if you want to use OpenCascade
#DEFINES += SOFA_HAVE_OPENCASCADE
#OPEN_CASCADE_DIR = C:/OpenCASCADE6.3.0/ros

# Uncomment if you want to test stable fluid plugin. It is an import of the SofaFluid project (https://gforge.inria.fr/projects/sofafluid/)
# DEFINES += SOFA_HAVE_STABLEFLUID_PLUGIN

########################################################################
# GPU
########################################################################

# Uncomment if you want to compile CUDA GPU prototype (require NVIDIA CUDA SDK)
# DEFINES += SOFA_GPU_CUDA
# Compute capabilities (sm_10 for G80, sm_11 for G92, sm_13 for GT200, see http://developer.nvidia.com/cuda-gpus)
# CUDA_FLAGS += --ptxas-options=-v -arch sm_20

# this is necessary for gcc 4.4+
# CUDA_FLAGS += --compiler-options -fno-inline

# Disable the ABI introduced in CUDA 3.1+ (program stack in kernel, which add registers overhead)
# CUDA_FLAGS += -Xptxas -abi=no

# Use to generate code for multiple architectures
# CUDA_FLAGS += -gencode=arch=compute_10,code=\\\"sm_10,compute_10\\\"
# CUDA_FLAGS += -gencode=arch=compute_13,code=\\\"sm_13,compute_13\\\"
# CUDA_FLAGS += -gencode=arch=compute_20,code=\\\"sm_20,compute_20\\\"

# CUDA_FLAGS += -g -G

# Uncomment if you want to use gcc4.4 to compile cuda files (use if you have weak error)
# CUDA_FLAGS += --compiler-bindir=/usr/bin/gcc-4.4

# Uncomment if you want to use IEEE 754-compliant floating point operations
# DEFINES += SOFA_GPU_CUDA_PRECISE

# Uncomment if you want to activate double-precision support in CUDA (requires GT200+ GPU and -arch sm_13 flag)
# DEFINES += SOFA_GPU_CUDA_DOUBLE

# Uncomment if you want to get double-precision for sqrt/div...
# (requires compute capability >= 2 and CUDA_VERSION > 3.0)
# (with SOFA_GPU_CUDA_PRECISE and SOFA_GPU_CUDA_DOUBLE you get IEEE 754-compliant floating point
#  operations for addition and multiplication only)
# DEFINES += SOFA_GPU_CUDA_DOUBLE_PRECISE

# Uncomment if you want to activate cublas support in CUDA (requires SOFA_GPU_CUDA_DOUBLE)
# DEFINES += SOFA_GPU_CUBLAS

# Uncomment if you want to activate CUDPP (for RadixSort)
# DEFINES += SOFA_GPU_CUDPP

# Uncomment if you want to activate THRUST (for RadixSort)
# Note: THRUST is included in CUDA SDK 4.0+, it is recommanded to use it if available
# DEFINES += SOFA_GPU_THRUST

# Uncomment if you want to debug CUDA kernels
# DEFINES += CUDA_DEBUG

# Uncomment if you want to compile OPENCL GPU prototype (require NVIDIA OPENCL SDK)
# DEFINES += SOFA_GPU_OPENCL

# Specify where the headers of opencl are located
# SOFA_GPU_OPENCL_DIR =  /usr/local/cuda

########################################################################
# Haptics & 3D devices
########################################################################

# Uncomment if you want to use Sensable Phantom
# DEFINES += SOFA_HAVE_SENSABLE

# Uncomment if you want to use Sensable Emulator
# DEFINES += SOFA_HAVE_SENSABLEEMULATION

# Uncomment if you want to use Haption Phantom
#DEFINES += SOFA_HAVE_HAPTION

# Uncomment if you want to use Xitact IHP and ITP tools
# DEFINES += SOFA_HAVE_XITACT

# Uncomment if you want to use HAPI (from http://www.h3dapi.org)
# DEFINES += SOFA_HAVE_HAPI

contains(DEFINES,SOFA_DEV){ # BEGIN SOFA_DEV

# Uncomment if you want to use ViSTA Device Drivers
# DEFINES += SOFA_HAVE_VDD

} # END SOFA_DEV

# Uncomment if you want to use ARTrack Device Drivers
# DEFINES += SOFA_HAVE_ARTRACK


# Uncomment if you want to have VRPN support
# DEFINES += SOFA_HAVE_VRPN

#Uncomment if you want to have Wiimote support in VRPN
#DEFINES += VRPN_USE_WIIUSE

# Uncomment if you want to use Optitrack (requires SOFA_HAVE_BOOST)
# DEFINES += SOFA_HAVE_OPTITRACK


#Uncomment if you want to compile the tutorial applications
#DEFINES += SOFA_HAVE_TUTORIALS

#Uncomment if you want to compile the Boost Kernel projects
#DEFINES += SOFA_HAVE_BOOSTKERNEL

# Uncomment if you want to use AsyncroHaptics
# DEFINES += SOFA_HAVE_ASYNCHROHAPTICS

########################################################################
# Plugins
########################################################################

# Uncomment the following to include more plugins

contains(DEFINES,SOFA_DEV){ # BEGIN SOFA_DEV

# DEFINES += SOFA_HAVE_VULCAIN                         # This is not bundled with SOFA and must be installed in Sofa/applications/plugins
# DEFINES += SOFA_HAVE_TRIANGULARMESHREFINER
# DEFINES += SOFA_HAVE_BEAMADAPTER
# DEFINES += SOFA_HAVE_SHELL
# DEFINES += SOFA_HAVE_TRIANGULARMESHBASEDHEXASCUTTER  # Note that you must define SOFA_GPU_CUDA to use this plugin.
# DEFINES += SOFA_HAVE_VOXELIZER                       # Note that you must define SOFA_GPU_CUDA to use this plugin.
# DEFINES += SOFA_HAVE_PHYSICALFIELDMODELING           # (reaction-diffusion propagation).
# DEFINES += SOFA_HAVE_FRAME                           # Frame-based meshless simulation of deformable solids
# DEFINES += SOFA_HAVE_IMAGE
# DEFINES += SOFA_HAVE_LIBFREENECT
   # SOFA_LIBFREENECT_PATH = /usr/include
# DEFINES += SOFA_HAVE_REGISTRATION
# DEFINES += SOFA_HAVE_STEPLOADER                      # Note that you must define SOFA_HAVE_OPENCASCADE to use this plugin.
# DEFINES += SOFA_HAVE_PERSISTENTCONTACT
# DEFINES += SOFA_HAVE_SOHUSIM
# DEFINES += SOFA_HAVE_ASCLEPIOS
# DEFINES += SOFA_HAVE_ELECTROPHYSIOLOGY
# DEFINES += SOFA_HAVE_MANIFOLDTOPOLOGIES
# Uncomment if you want to use Interventional Radiology module
# DEFINES += SOFA_HAVE_SOFAEVE
#DEFINES += SOFA_HAVE_optixdetection


} # END SOFA_DEV
# DEFINES += SOFA_HAVE_QTOGREVIEWER
win32{
  # OGRE_HOME= E:\dev\ogre_src_v1-7-2\VCBuild\sdk
}
# DEFINES += SOFA_HAVE_PLUGIN_COLLADA
# DEFINES += SOFA_HAVE_PLUGIN_FEM
# DEFINES += SOFA_HAVE_PLUGIN_Flexible   # Experimental unification of FEM and meshless deformable solids
# DEFINES += SOFA_HAVE_PLUGIN_FlexibleDev   # Experimental unification of FEM and meshless deformable solids (private part). Requires the Flexible plugin.
# DEFINES += SOFA_HAVE_PLUGIN_Compliant  # Alternative formulation of the dynamics. Requires the Flexible plugin, and the installation of the Boost.Test library, see Compliant/doc/index.html
# DEFINES += SOFA_HAVE_PLUGIN_CompliantDev  # Alternative formulation of the dynamics (private part). Requires the Compliant plugin.
# DEFINES += SOFA_HAVE_PLUGIN_ModelHierarchies # Experiments on layered and adaptive models

########################################################################
# Compiler options
########################################################################

# First we remove all options that we be set only for projects that use them
CONFIG -= lex yacc qt link_prl app_bundle

win32{
# CONFIG += debug_and_release
## Debug symbols even in release mode:
# QMAKE_CXXFLAGS_RELEASE += /Zi 
# QMAKE_LFLAGS_RELEASE += /DEBUG
}
unix{
CONFIG -= debug release
# Uncomment if you want to compile the debug or release version
#CONFIG += debug
CONFIG += release

# Uncomment if you want debug symbols even in release build
# QMAKE_CXXFLAGS += -g

# Uncomment if you want to be able to profile the code using gprof
# QMAKE_CXXFLAGS *= -pg
# QMAKE_LDFLAGS *= -pg
# QMAKE_LFLAGS_DEBUG *= -pg
# QMAKE_LFLAGS_RELEASE *= -pg

# Change to use different version of the compiler
QMAKE_CC         = gcc
QMAKE_CXX        = g++
QMAKE_LINK       = g++
QMAKE_LINK_SHLIB = g++

CXX_VERSION = $$system($${QMAKE_CXX} -dumpversion)

## Under gcc 4.6, the release optimisation causes error:
## we need to disable new partial inlining optimization.
CXX_IS_4_6 = $$find(CXX_VERSION, "^4.6")
count(CXX_IS_4_6, 1): QMAKE_CXXFLAGS_RELEASE += -fno-partial-inlining
## If is not enough (still erreur section type conflict...): uncomment also to compile successfully 
#QMAKE_CXXFLAGS_RELEASE -= -O2
#QMAKE_CXXFLAGS_RELEASE += -O1



# Make sure undefined symbols are reported as error when linking each dynamic libraries instead of the first program using them
unix:!macx: QMAKE_LFLAGS_SHLIB *= -Wl,--no-undefined

# Using GCC >= 4.3, the best know optimization flags to compile SOFA are :
# QMAKE_CFLAGS_RELEASE   -= -O2 -march=i586 -mtune=generic -Wp,-D_FORTIFY_SOURCE=2 -fstack-protector --param=ssp-buffer-size=4
# QMAKE_CXXFLAGS_RELEASE -= -O2 -march=i586 -mtune=generic -Wp,-D_FORTIFY_SOURCE=2 -fstack-protector --param=ssp-buffer-size=4
# QMAKE_CFLAGS_RELEASE   *= -O3 -march=native -mtune=native -fno-math-errno -funroll-loops -mfpmath=387
# QMAKE_CXXFLAGS_RELEASE *= -O3 -march=native -mtune=native -fno-math-errno -funroll-loops -mfpmath=387
# With earlier version, native must be replaced by your specific processor architecture

contains(DEFINES,SOFA_DEV){ # BEGIN SOFA_DEV
# Uncomment if you want your compilation to stop at the first error 
# QMAKE_CXXFLAGS += -Wfatal-errors
}

# comment this out if you want to track the possible reinterpret_cast problems
# QMAKE_CXXFLAGS += -fno-strict-aliasing
}

QMAKE_CXXFLAGS_DEBUG += -DSOFA_DEBUG
