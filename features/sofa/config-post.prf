
########################################################################
# Defines
########################################################################

# Class reflection / plugins system: define SOFA_TARGET and SOFA_LIBSUFFIX macro
contains(TEMPLATE, subdirs) | contains(TEMPLATE, vcsubdirs) {
} else {
	#!isEmpty(TARGET): message("TARGET: $$TARGET")
	DEFINES *= SOFA_TARGET=$$TARGET_BASE
	DEFINES *= SOFA_MAKEFILEDIR=$$MAKEFILE_DIR
	!isEmpty(LIBSUFFIX): DEFINES *= SOFA_LIBSUFFIX=$$LIBSUFFIX
}

########################################################################
# System-specific configuration
########################################################################

win32-msvc* {
	QMAKE_CXXFLAGS_DEBUG += -wd4250 -wd4251 -wd4275 /Fd./$${TARGET}.pdb
	QMAKE_CXXFLAGS_RELEASE += -wd4250 -wd4251 -wd4275 /Fd./$${TARGET}.pdb
}

win32-msvc.net {
	QMAKE_CXXFLAGS_DEBUG += -wd4675
	QMAKE_CXXFLAGS_RELEASE += -wd4675
}

win32-msvc20* {
	QMAKE_CXXFLAGS_DEBUG += -wd4996
	QMAKE_CXXFLAGS_RELEASE += -wd4996
}

win32 {
	#LIBS *= -lglut32 -lcomctl32 -lopengl32 -lglu32 -lAdvAPI32 -lUser32 -lShell32 -lGdi32 -lWSock32 -lWS2_32 -lOle32
	LIBS *= -lGdi32 -lShell32
	
	TARGET_MACHINE = $$system(echo %TARGET_MACHINE%)
	contains(TARGET_MACHINE, x64) {
		QMAKE_LFLAGS *= /MACHINE:X64
		win32-msvc* {
			# disable warnings about 64 bits -> 32 bits integer conversions
			QMAKE_CXXFLAGS_DEBUG += -wd4267
			QMAKE_CXXFLAGS_RELEASE += -wd4267
		}
	}
}

unix {
	!macx {
        # The following is a workaround to get KDevelop to detect the name of the program to start
        contains(TEMPLATE, app) {
            QMAKE_POST_LINK = ln -sf $$TARGET $$APP_DESTDIR/$${TARGET_BASE}-latest
        }
    }
    macx {
        # The following enables to start the program from the command line as well as graphically
        contains(TEMPLATE, app):contains (CONFIG, app_bundle) {
            QMAKE_POST_LINK = ln -sf $${TARGET}.$$TEMPLATE/Contents/MacOS/$$TARGET $$APP_DESTDIR/$$TARGET
        }
    }
}

########################################################################
# Deprecated lib and include directories (when using dependencies packages)
# This section should be removed when scripts will be updated to use installed
# version of the libraries.
########################################################################

win32 {
	CONFIG(debug, debug|release) : VCCONFIGDIR = Debug
	else :                         VCCONFIGDIR = Release
	
	     win32-msvc2005 : VCCONFIGDIR = $${VCCONFIGDIR}VC8
	else:win32-msvc2008 : VCCONFIGDIR = $${VCCONFIGDIR}VC9
    else                : VCCONFIGDIR = $${VCCONFIGDIR}VC10

	contains(TARGET_MACHINE, x64) {
		LIBS *= -L$$ROOT_SRC_DIR/lib/win64/$$VCCONFIGDIR -L$$ROOT_SRC_DIR/lib/win64/Common
	} else {
		LIBS *= -L$$ROOT_SRC_DIR/lib/win32/$$VCCONFIGDIR -L$$ROOT_SRC_DIR/lib/win32/Common
	}
}
macx {
	LIBS *= -L$$ROOT_SRC_DIR/lib/macx
}
INCLUDEPATH *= $$ROOT_SRC_DIR/include

########################################################################
# Cuda Support
# It is necessary to define the Cuda compiler here and not in cuda.prf
# because it needs to have access to the final values of the variables:
# INCLUDEPATH, DEFINES, etc.
########################################################################

contains (DEFINES, SOFA_GPU_CUDA) {
	cuda.input = CUDA_SOURCES
	QMAKE_EXTRA_COMPILERS *= cuda
	win32 {
	
		CUDA_DIR = $$system(echo %CUDA_PATH%)
		CUDA_DIR = $$replace(CUDA_DIR,\\\\,/)
		CUDA_BIN_PATH = $$system(echo %CUDA_PATH%/bin)
		CUDA_BIN_PATH = $$replace(CUDA_BIN_PATH,\\\\,/)
		CUDA_INC_PATH = $$system(echo %CUDA_PATH%/include)
		CUDA_INC_PATH = $$replace(CUDA_INC_PATH,\\\\,/)
		
		contains(QMAKE_TARGET.arch, x86_64) {
			QMAKE_LIBDIR += '"'$$quote($${CUDA_DIR}/lib/x64)'"'
		}
		else {
			QMAKE_LIBDIR += '"'$$quote($${CUDA_DIR}/lib/Win32)'"'
			CUDA_FLAGS += --machine 32
		}
		LIBS *= -lcudart
		contains(DEFINES,SOFA_GPU_CUBLAS) {
			LIBS *= -lcublas
			LIBS *= -lcusparse
		}	
		contains(CUDA_FLAGS,--device-emulation) {
			cuda.output = $${OBJECTS_DIR}/${QMAKE_FILE_BASE}_cudaemu.obj
			cuda.clean = $${OBJECTS_DIR}/${QMAKE_FILE_BASE}_cudaemu.obj
		}
		else {
			cuda.output = $${OBJECTS_DIR}/${QMAKE_FILE_BASE}_cuda.obj
			cuda.clean = $${OBJECTS_DIR}/${QMAKE_FILE_BASE}_cuda.obj
		}
		CONFIG(debug, debug|release) : CUDA_FLAGS += -Xcompiler -MDd
		else                         : CUDA_FLAGS += -Xcompiler -MD
        cuda.commands = '"'$$quote($${CUDA_BIN_PATH}/nvcc.exe)'"' -c $$CUDA_FLAGS -Xcompiler -nologo $${join(INCLUDEPATH,'" -I "','-I "','"')} $${join(DEFINES," -D","-D",)} ${QMAKE_FILE_NAME} -o ${QMAKE_FILE_OUT}
		cuda.dependency_type = TYPE_C
		INCLUDEPATH += '"'$$quote($${CUDA_INC_PATH})'"'
	}
	unix {
#message(>CUDA)
		# auto-detect CUDA path
		CUDA_DIR = $${system(which nvcc | sed 's,/bin/*nvcc$,,')}
		INCLUDEPATH += $${CUDA_DIR}/include

		contains(TARGET_ARCH, 64) : !macx {
			QMAKE_LIBDIR += $${CUDA_DIR}/lib64
		} else {
			QMAKE_LIBDIR += $${CUDA_DIR}/lib
		}

		LIBS *= -lcudart
		contains(DEFINES,SOFA_GPU_CUBLAS) {
			LIBS *= -lcublas
			LIBS *= -lcusparse
		}
#		macx: QMAKE_LFLAGS += -Wl,-rpath,$${CUDA_DIR}/lib
		contains(CUDA_FLAGS,--device-emulation) {
			cuda.output = ${OBJECTS_DIR}${QMAKE_FILE_BASE}_cudaemu.o
			cuda.clean = ${OBJECTS_DIR}${QMAKE_FILE_BASE}_cudaemu.o
		}
		else {
			cuda.output = ${OBJECTS_DIR}${QMAKE_FILE_BASE}_cuda.o
			cuda.clean = ${OBJECTS_DIR}${QMAKE_FILE_BASE}_cuda.o
		}
		contains(CONFIGDEBUG, debug) {
			CUDA_FLAGS *= -g
		}
		equals(TARGET_ARCH, 32) {
			CUDA_FLAGS *= -m32
		}
		equals(TARGET_ARCH, 64) {
			contains(QMAKE_CFLAGS, -m32) | contains(CONFIG, x86) : CUDA_FLAGS *= -m32
			else : CUDA_FLAGS *= -m64
		}

		#Uncomment the following lines if you use gcc4.6 for Sofa
		#(else gcc4.4 won't recognize the flag -fno-partial-inlining)
		QMAKE_NVCCFLAGS = $$QMAKE_CXXFLAGS_RELEASE
		QMAKE_NVCCFLAGS -= -fno-partial-inlining

                cuda.commands = nvcc -c $$CUDA_FLAGS -Xcompiler  -fPIC,$${join(QMAKE_NVCCFLAGS,",")}  $${join(DEFINES," -D","-D")} $(INCPATH) ${QMAKE_FILE_NAME} -o ${QMAKE_FILE_OUT}
		cuda.dependency_type = TYPE_C
#		macx: cuda.commands += --host-compilation 'C'
#message(<CUDA)
	}
}
