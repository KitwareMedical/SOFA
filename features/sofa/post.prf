########################################################################
# SOFA build system configuration
#   This file should be included at the end of each pro file
########################################################################

!isEmpty(PLUGIN_NAME): load($$FEATURES_DIR/plugin)

!contains(TEMPLATE, subdirs) : !contains(TEMPLATE, vcsubdirs) {
	loadDependencies($$TARGET)
}

########################################################################
# Setup some descriptive variables
########################################################################

contains(TEMPLATE, lib) | contains(TEMPLATE, vclib) {
	IS_LIBRARY = true
}
contains(TEMPLATE, app) | contains(TEMPLATE, vcapp) {
	IS_APPLICATION = true
}
contains(TEMPLATE, subdirs) | contains(TEMPLATE, vcsubdirs) {
	IS_SUBDIR = true
}
contains(TEMPLATE, vcsubdirs) | contains(TEMPLATE, vclib) | contains(TEMPLATE, vcapp) {
	IS_SLN = true
}

########################################################################
# Setup some variables for compilation
########################################################################

# Use shared libraries except if requested otherwise, through the CONFIGSTATIC variable 
!contains(CONFIGSTATIC, static) {
	CONFIG -= staticlib
	CONFIG += dll
} else {
	CONFIG -= dll shared
	CONFIG += staticlib
}

# This block is executed when generating Visual C++ solutions.
# It fixes a difficulty for detecting root build and source directories in the
# process of generating the solution.
# Indeed, .sln generation requires several passes, and the last one always have
# the root build dir in the OUT_PWD variable (whatever the .pro file).
# It makes root dirs detection using qmake variables completely impossible.
# The only solution I found is to save into a file these directories in a
# previous pass and read it back later.
#
win32 : !build_pass : equals(IS_SLN, true) : equals(SRC_DIR, $$ROOT_SRC_DIR) {
	system(echo ROOT_SRC_DIR=$$ROOT_SRC_DIR > $$ROOT_BUILD_DIR/builddirs.pri)
	system(echo ROOT_BUILD_DIR=$$ROOT_BUILD_DIR >> $$ROOT_BUILD_DIR/builddirs.pri)
}

# This block is executed when generating Visual C++ solutions.
# It adds the content of the LIB and INCLUDE environment variables (as defined
# when running qmake) to the LIBS and INCLUDEPATH variables.
# It makes it optional to define those variables at the system level. They only
# have to be defined when generating the solution, within the console.
# The implementation has to cope with paths containing spaces.
# It has to transform spaces to pipes (because this is a restricted character that
# won't be used in the original path), split semi-colon separated path entries,
# and add each of these path entries to the library/include list (the pipes 
# are converted back to spaces before that).
#
equals(IS_SLN, true) {
	ENV_LIB = $$(LIB)
	!isEmpty(ENV_LIB) {
		ENV_LIB = $$join(ENV_LIB, <,,) # Transform spaces to <
		ENV_LIB = $$split(ENV_LIB, ;)  # Transform semi-colons to spaces
		for(library, ENV_LIB) {        # Loop on space separated elements => each path entry
			library = $$replace(library, <, ' ') # Revert < to spaces
			LIBS *= -L$$library               # Add quoted path as a library path
		}
	}
	ENV_INCLUDE = $$(INCLUDE)
	!isEmpty(ENV_INCLUDE) {
		ENV_INCLUDE = $$join(ENV_INCLUDE, <,,) # Transform spaces to <
		ENV_INCLUDE = $$split(ENV_INCLUDE, ;)  # Transform semi-colons to spaces
		for(include, ENV_INCLUDE) {            # Loop on space separated elements => each path entry
			include = $$replace(include, <, ' ') # Revert < to spaces
			INCLUDEPATH *= $$include          # Add quoted path as a library path
		}
	}
}

########################################################################
# Definition of artifacts directories and name
########################################################################

equals(IS_LIBRARY, true) {
	DESTDIR = $$LIB_DESTDIR
    win32{
      DLLDESTDIR = $$APP_DESTDIR
    }
}
equals(IS_APPLICATION, true) {
    DESTDIR = $$APP_DESTDIR
}

equals(IS_LIBRARY, true) {
	SUFFIX = $$LIBSUFFIX
}
equals(IS_APPLICATION, true) {
	SUFFIX = $$APPSUFFIX
}
TARGET_BASE = $$TARGET
MAKEFILE_DIR = $$dirname(_PRO_FILE_)
!isEmpty(SUFFIX) {
	TARGET = $$TARGET$$SUFFIX
}

isEmpty(OBJMOC) {
	contains(TEMPLATE, vclib) | contains(TEMPLATE, vcapp) {
	} else {
		unset(MOC_DIR)
	}
}

equals(IS_APPLICATION, true) {
    win32 {
        CONFIG += console
    }
}

########################################################################
# Load SOFA-specific configuration
########################################################################

load($$FEATURES_DIR/config-post)

!equals(IS_SLN, true) {

########################################################################
# Definition of make install
########################################################################

# If the build system features files exist in the source dir, we install them.
equals(ROOT_PATH, .) : exists($$SRC_FEATURES_DIR) {
	
    BUILD_SYSTEM_FILES = $$files($$SRC_FEATURES_DIR/*.prf)
	INSTALLS += buildsystem

	buildsystem.files = \
		$$BUILD_SYSTEM_FILES \
		$$files($$BUILD_DIR/*.prf)

	buildsystem.path = $$INSTALL_PRF_DIR
}

contains(TEMPLATE, subdirs) {
	features.files = $$files($$SRC_DIR/*.prf)
	!isEmpty(features.files) {
		features.path  = $$INSTALL_PRF_DIR
		INSTALLS += features
	}
}

contains(TEMPLATE, lib) {
#message(INSTALLS)
	INSTALLS += target features headers

	QMAKE_EXTRA_TARGETS += uninstall_headers
	UNINSTALLDEPS += uninstall_headers

	target.path    = $$INSTALL_LIB_DIR
	features.files = $${TARGET_BASE}.prf
	features.path  = $$INSTALL_PRF_DIR

	headers.path = $$INSTALL_INC_DIR/$$SUBDIR_PATH
	
	# Creates the list of subfolders
	for(header, HEADERS) {
		headersDirsUnsorted *= $$dirname(header)
	}
	# Sort this list in ascending order to create directories from the outermost to the innermost
	headersDirsMk = $$system("echo \"$$join(headersDirsUnsorted, \\n,,)\" | sort")
	# Sort this list in descending order to destroy directories from the innermost to the outermost
	headersDirsRm = $$system("echo \"$$join(headersDirsUnsorted, \\n,,)\" | sort -r")

	# Setup install target to create the subdirectories
	for(dir, headersDirsMk) {
		addCommand(headers.commands, -$(MKDIR) $(INSTALL_ROOT)$$headers.path/$$dir)
	}

	# Create a recipe to install and uninstall each header file
	for(header, HEADERS) {
		file = $$basename(header)
		dir = $$dirname(header)
		destdir = $(INSTALL_ROOT)$$headers.path
		!isEmpty(dir): destdir = $$destdir/$$dir
		addCommand(headers.commands, -$(INSTALL_FILE) $$SRC_DIR/$$header $$destdir)
		addCommand(uninstall_headers.commands, -$(DEL_FILE) $$destdir/$$file)
	}

	# Setup uninstall target to remove the subdirectories
	for(dir, headersDirsRm) {
		addCommand(uninstall_headers.commands, -$(DEL_DIR) $(INSTALL_ROOT)$$headers.path/$$dir)	
	}
	addCommand(uninstall_headers.commands, -$(DEL_DIR) $(INSTALL_ROOT)$$headers.path)
}

contains(TEMPLATE, app) {
	INSTALLS += target
	target.path = $$INSTALL_BIN_DIR
}

########################################################################
# Definition of make dist
########################################################################

#message(FULLDIST)
# "dist" target already exists in qmake but behaves incorrectly
# We have to create another target
QMAKE_EXTRA_TARGETS += fulldist

# We distribute the .pro file and any file listed in DISTFILES (standard qmake variable)
# All filenames in DIST_FILES must be relative to the root source directory,
# that's why we append SUBDIR_PATH to local filenames defined in each .pro
PRO_FILE = $$normalizePath($$_PRO_FILE_)
DIST_FILES  = $$replace(PRO_FILE, $$ROOT_SRC_DIR/, )
DIST_FILES += $$join(DISTFILES, " $$SUBDIR_PATH/", $$SUBDIR_PATH/)

fulldist.files = $$basename(PRO_FILE) $$DISTFILES

contains(TEMPLATE, subdirs) {
	fulldist.CONFIG = recursive
} else {
	# SOURCES and HEADERS declared in each pro files are also distributed
	DIST_FILES += $$join(SOURCES, " $$SUBDIR_PATH/", $$SUBDIR_PATH/)
	DIST_FILES += $$join(HEADERS, " $$SUBDIR_PATH/", $$SUBDIR_PATH/)
	fulldist.files += $$SOURCES $$HEADERS
}

# Each makefile will copy the files it knows in the DIST_DIR, recreating a
# parallel directory hierarchy.
addCommand(fulldist.commands, $(CHK_DIR_EXISTS) $$DIST_DIR || $(MKDIR) $$DIST_DIR)
addCommand(fulldist.commands, (cd $$ROOT_SRC_DIR && rsync -R $$DIST_FILES $$DIST_DIR))

# In the root makefile, we copy feature files, pack everything and remove the DIST_DIR
equals(ROOT_PATH, .) {
	# We override the dist target that should not exist at the root if it is a
	# recursive project.
	contains(TEMPLATE, subdirs) {
		QMAKE_EXTRA_TARGETS += dist
		dist.depends = fulldist
	}
	!isEmpty(BUILD_SYSTEM_FILES) {
		addCommand(fulldist.commands, (cd $$ROOT_SRC_DIR && rsync -R $$BUILD_SYSTEM_FILES $$DIST_DIR))
	}
	addCommand(fulldist.commands, tar -czvf $$PACKAGE-$${RELEASE}.tar.gz $$PACKAGE-$$RELEASE/)
	addCommand(fulldist.commands, $(DEL_FILE) -r $$PACKAGE-$$RELEASE/)
}

########################################################################
# Definition of make maintainer-clean
#		This target should remove any file or directory generated by qmake
#		and make all. It does not remove things generated by make dist or
#		make install.
########################################################################

#message(MAINTAINER-CLEAN)
QMAKE_EXTRA_TARGETS += maintainer-clean

contains(TEMPLATE, subdirs) {
	maintainer-clean.CONFIG = recursive
	addCommand(maintainer-clean.commands, $(DEL_FILE) Makefile)
} else {
	# When not calling any recursive makefile: call distclean
	maintainer-clean.depends = distclean
}

# Remove the directories where we put intermediate files
!isEmpty(OBJECTS_DIR): addCommand(maintainer-clean.commands, ($(CHK_DIR_EXISTS) $$OBJECTS_DIR && $(DEL_DIR) -p $$OBJECTS_DIR; true))
!isEmpty(RCC_DIR):     addCommand(maintainer-clean.commands, ($(CHK_DIR_EXISTS) $$RCC_DIR     && $(DEL_DIR) -p $$RCC_DIR; true))
!isEmpty(MOC_DIR):     addCommand(maintainer-clean.commands, ($(CHK_DIR_EXISTS) $$MOC_DIR     && $(DEL_DIR) -p $$MOC_DIR; true))
!isEmpty(UI_DIR):      addCommand(maintainer-clean.commands, ($(CHK_DIR_EXISTS) $$UI_DIR      && $(DEL_DIR) -p $$UI_DIR; true))

# In the root makefile we destroy the directories for libraries and applications
equals(ROOT_PATH, .) {
	LOCAL_LIB_DESTDIR = $$replace(LIB_DESTDIR, ./, )
	LOCAL_APP_DESTDIR = $$replace(APP_DESTDIR, ./, )
	LOCAL_LIB_DESTDIR = $$replace(LOCAL_LIB_DESTDIR, $$ROOT_BUILD_DIR/, )
	LOCAL_APP_DESTDIR = $$replace(LOCAL_APP_DESTDIR, $$ROOT_BUILD_DIR/, )

	addCommand(maintainer-clean.commands, ($(CHK_DIR_EXISTS) $$LOCAL_LIB_DESTDIR && $(DEL_DIR) -p $$LOCAL_LIB_DESTDIR; true))
	addCommand(maintainer-clean.commands, ($(CHK_DIR_EXISTS) $$LOCAL_APP_DESTDIR && $(DEL_DIR) -p $$LOCAL_APP_DESTDIR; true))
}

# In case of out-of-source build we destroy the parallel directory hierarchy created by qmake
!equals(BUILD_DIR, $$SRC_DIR) {
	contains(TEMPLATE, subdirs) {
		# Create the list of directories
		for(dir, SUBDIRS) {
			!isEmpty($${dir}.subdir) {
				SUBDIRS_PATH += $$eval($${dir}.subdir)
			} else: !isEmpty($${dir}.file) {
				SUBDIRS_PATH += $$dirname(eval($${dir}.file))
			} else {
				SUBDIRS_PATH += $$dir
			}
		}
		addCommand(maintainer-clean.commands, $(DEL_DIR) -p $$SUBDIRS_PATH; true)
	}
}

} # !equals(IS_SLN, true)
#message(Done)
#message( "INCLUDEPATH: " $${INCLUDEPATH})
#message( "DEPENDPATH: " $${DEPENDPATH})
#message( "LIBDIR: " $${QMAKE_LIBDIR})
