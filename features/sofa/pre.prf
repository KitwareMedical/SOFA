########################################################################
# SOFA build system configuration
#   This file should be included at the very beginning of each pro file
########################################################################
load(sofa/functions)

########################################################################
# Fixed variables (no customization possible)
########################################################################

#PLUGINS_PATH = applications/plugins
SRC_FEATURES_PATH = features/sofa
INSTALL_INC_PATH = include/sofa
INSTALL_LIB_PATH = lib
INSTALL_BIN_PATH = bin

########################################################################
# Build system path variables
#		Warning: trying to modify these variables is pointless, they just
#		describe where the build system is running.
########################################################################

FEATURES_DIR = $$normalizePath($$PWD)
BUILD_DIR = $$normalizePath($$OUT_PWD)
SRC_DIR   = $$normalizePath($$_PRO_FILE_PWD_)

equals(BUILD_DIR, $$SRC_DIR) {
	OUT_OF_SOURCE = false
} else {
	OUT_OF_SOURCE = true
}

# On windows, when generating Visual C++ solutions, the root source dir and
# root build dir cannot be detected in some passes. To avoid this problem,
# we use this builddirs.pri file generated in post.prf.
# The pass that needs it will have OUT_PWD equal to the root build dir, so
# it matches the place where this file is created in post.prf
#
win32 : exists($$BUILD_DIR/builddirs.pri) {
	include($$BUILD_DIR/builddirs.pri)

	SUBDIR_PATH = $$replace(BUILD_DIR, $$ROOT_BUILD_DIR, .)
	SUBDIR_PATH = $$replace(SUBDIR_PATH, ^\\./,)

	ROOT_PATH = $$replace(SUBDIR_PATH, [^/]+/, ../)
	ROOT_PATH = $$replace(ROOT_PATH, [^/]+$, ..)
} else {

# We could get the ROOT_BUILD_DIR on Unix using $$(PWD), but
# on Windows the equivalent $$(CD) does not work and $$system(echo %CD%)
# gives the same path as $$PWD which is not the root build directory.
# We have to compute what piece of path is common to both the BUILD_DIR
# and the SRC_DIR and deduce the root build directory.
# We have chosen to use a common approach for both platform, because it
# makes it easier to compute derivate paths: SUBDIR_PATH and ROOT_PATH.

equals(OUT_OF_SOURCE, true) {
	# Out-of-source build.
    #message (Out of source build)
	ROOT_SRC_DIR   = $$SRC_DIR
	system(echo $$ROOT_SRC_DIR)
	ROOT_BUILD_DIR = $$BUILD_DIR
	DIR_LIST = $$split(SRC_DIR, '/')
	# We iterate on path elements.
	# Each iteration will discard the last element of each path
	# until they get different. At this moment the remaining paths
	# will only contain the root source dir and the root build dir.
	for(dir, DIR_LIST) {
		sdir = $$basename(ROOT_SRC_DIR)
		bdir = $$basename(ROOT_BUILD_DIR)
		equals(sdir, $$bdir) {
			# Prepend the directory to the path of the subdir
			isEmpty(SUBDIR_PATH): SUBDIR_PATH = $$sdir
			else:                 SUBDIR_PATH = $$sdir/$$SUBDIR_PATH
			isEmpty(ROOT_PATH):   ROOT_PATH = ..
			else:                 ROOT_PATH = $$ROOT_PATH/..
			# Remove the last element of the directory lists
			ROOT_SRC_DIR = $$dirname(ROOT_SRC_DIR)
			ROOT_BUILD_DIR = $$dirname(ROOT_BUILD_DIR)
		} else {
			break()
		}
	}
	isEmpty(SUBDIR_PATH):    SUBDIR_PATH = .
	isEmpty(ROOT_PATH):      ROOT_PATH = .
	isEmpty(ROOT_SRC_DIR):   ROOT_SRC_DIR = .
	isEmpty(ROOT_BUILD_DIR): ROOT_BUILD_DIR = .
} else {
	# In-source build.
    #message (In-source build)
	unix {
        # HACK: we cannot use $$(PWD) as it does not correspond to the root dir when qmake is automatically called to update a sub-project
		ROOT_BUILD_DIR = $$system(cd $$PWD/../.. && pwd -P)
		ROOT_SRC_DIR = $$ROOT_BUILD_DIR
        #message ($$ROOT_SRC_DIR)
	} else {
		# HACK: On windows we have no other choice but to make assumptions about the
		# names of the source directories to deduce the root source directory.
	  ROOT_SRC_DIR   = $$replace(SRC_DIR, (.+)/(applications|applications-dev|extlibs|framework|modules|tests)(/.+)?, \\1)
		ROOT_BUILD_DIR = $$ROOT_SRC_DIR
	}
	SUBDIR_PATH = $$replace(BUILD_DIR, $$ROOT_BUILD_DIR, .)
	SUBDIR_PATH = $$replace(SUBDIR_PATH, ^\\./,)

	ROOT_PATH = $$replace(SUBDIR_PATH, [^/]+/, ../)
	ROOT_PATH = $$replace(ROOT_PATH, [^/]+$, ..)
}
}

#message(OUT_PWD       $$escape_expand(\\t)= $$OUT_PWD)
#message(_PRO_FILE_    $$escape_expand(\\t)= $$_PRO_FILE_)
#message(ROOT_SRC_DIR  $$escape_expand(\\t)= $$ROOT_SRC_DIR)
#message(SRC_DIR       $$escape_expand(\\t)= $$SRC_DIR)
#message(ROOT_BUILD_DIR$$escape_expand(\\t)= $$ROOT_BUILD_DIR)
#message(BUILD_DIR     $$escape_expand(\\t)= $$BUILD_DIR)
#message(SUBDIR_PATH   $$escape_expand(\\t)= $$SUBDIR_PATH)
#message(ROOT_PATH     $$escape_expand(\\t)= $$ROOT_PATH)

########################################################################
# Extension point:
#		If needed, create a file name sofa/pre-custom.prf at the root of
#		your build dir (where you run qmake), and set any variable you need.
#		Values defined there will override default values.
#		If you run "make install" this file will be installed.
########################################################################

DEFAULT_FEATURES_FILE = $$ROOT_SRC_DIR/sofa-default
CUSTOM_FEATURES_FILE = $$ROOT_BUILD_DIR/sofa-local
INSTALLED_FEATURES_FILE = $$FEATURES_DIR/sofa-local

# If sofa-local.prf does not exist in the build dir, use sofa-default.prf instead
!exists($${CUSTOM_FEATURES_FILE}.prf) {
	exists($${DEFAULT_FEATURES_FILE}.prf) {
        CUSTOM_FEATURES_FILE = $${DEFAULT_FEATURES_FILE}
	}
}

exists($${CUSTOM_FEATURES_FILE}.prf) {
	load($$CUSTOM_FEATURES_FILE)
}

exists($${INSTALLED_FEATURES_FILE}.prf) {
	load($$INSTALLED_FEATURES_FILE)
}

########################################################################
# Descriptive variables
########################################################################

win32 {
  contains(QMAKE_TARGET.arch, x86_64) {
    # message("64 bits target")
    TARGET_ARCH=64
  } else {
    # message("32 bits target")
    TARGET_ARCH=32
  }
} else:*-32* {
  # message("32 bits target")
  TARGET_ARCH=32
} else:*-64* {
  # message("64 bits target")
  TARGET_ARCH=64
} else {
  CXX_HOST=$$system("$$QMAKE_CXX -v 2>&1 | sed -n -e 's/.*--host=\\([^ ]*\\).*/\\1/p'")
  is64 = $$find(CXX_HOST, x86_64)
  !isEmpty(is64) {
    # message("64 bits target (host default)")
    TARGET_ARCH=64
  } else {
    # message("32 bits target (host default)")
    TARGET_ARCH=32
  }
}

CONFIG(debug, debug|release) {
	CONFIGDEBUG = debug
} else {
	CONFIGDEBUG = release
}

contains(QMAKE_CXXFLAGS, -pg) {
  CONFIGDEBUG += profile
}

CONFIG(release, debug|release) {
	#message(release pass)
} else {
	#message(debug pass)
}

build_pass {
	#message(build pass)
} else {
	#message(not build)
}

########################################################################
# Some configuration variables
########################################################################

VERSION_NUM = 1_0

win32:!build_pass {
# BUGFIX: do not set suffixes when not building actual makefiles (such as when generating the root visual studio solution)
LIBSUFFIX=
APPSUFFIX=
}
else {
win32 {
	LIBSUFFIX = _$${VERSION_NUM}
}

contains(CONFIGDEBUG, debug) {
	LIBSUFFIX = $${LIBSUFFIX}d
	APPSUFFIX = d
}

contains(CONFIGDEBUG, profile) {
	APPSUFFIX = $${APPSUFFIX}p
}

}

########################################################################
# Definition of Qt standard paths for intermediate files
########################################################################

# Only define these directories when performing an in-source build.
!equals(OUT_OF_SOURCE, true) {
	isEmpty(OBJECTS_DIR) {
		OBJECTS_DIR = OBJ/$$TARGET/$$join(CONFIGDEBUG, -, , )
	}
	
	isEmpty(RCC_DIR) {
		RCC_DIR = RCC
	}
	
	isEmpty(MOC_DIR) {
		MOC_DIR = MOC
	}
	
	isEmpty(UI_DIR) {
#		UI_DIR = UI
	}
} else {
	isEmpty(OBJECTS_DIR): OBJECTS_DIR = .
}

########################################################################
# Detection of SOFA-specific paths
########################################################################

SRC_FEATURES_DIR = $$ROOT_SRC_DIR/$$SRC_FEATURES_PATH

isEmpty(INSTALL_DIR) {
	INSTALL_DIR = /usr
}

equals(FEATURES_DIR, $$SRC_FEATURES_DIR) {
	USING_INSTALL = false
} else {
	USING_INSTALL = true
	
	SOFA_INSTALL_DIR = $$replace(FEATURES_DIR, ^(.*$${INSTALL_DIR})/.+$, \\1)
	isEmpty(SOFA_INSTALL_DIR): error(Unable to detect the install dir (maybe it has been moved since install, or some .prf file have been deleted))	
}


QMAKE_MKSPECS = $$[QMAKE_MKSPECS]
match = $$find(QMAKE_MKSPECS, ^$${INSTALL_DIR}.*$)
isEmpty(match) {
	equals(ROOT_PATH, .) { # only display this message at the root level.
		warning(Feature files will not be installed in Qt standard directory; so you will have to set QMAKEFEATURES environment variable to use them.)
	}
	INSTALL_PRF_PATH = share/sofa/$$$$SRC_FEATURES_PATH
} else {
	INSTALL_PRF_PATH = $$replace(QMAKE_MKSPECS, ^$$INSTALL_DIR/(.+), \\1)/$$SRC_FEATURES_PATH
}

########################################################################
# Customizable parameters
########################################################################

isEmpty(PACKAGE) {
	PACKAGE = sofa
}

isEmpty(RELEASE) {
	RELEASE = 1.0.0
}

isEmpty(DIST_DIR) {
	DIST_DIR = $$ROOT_BUILD_DIR/$$PACKAGE-$$RELEASE
}

isEmpty(CONFIGSTATIC) {
	CONFIGSTATIC = shared
}

isEmpty(LIB_DESTDIR) {
	LIB_DESTDIR = $$ROOT_PATH/lib
}

isEmpty(APP_DESTDIR) {
	APP_DESTDIR = $$ROOT_PATH/bin
}

########################################################################
# Definition of derived paths
########################################################################

# Define the target directories for installation
INSTALL_INC_DIR = $$INSTALL_DIR/$$INSTALL_INC_PATH
INSTALL_LIB_DIR = $$INSTALL_DIR/$$INSTALL_LIB_PATH
INSTALL_BIN_DIR = $$INSTALL_DIR/$$INSTALL_BIN_PATH
INSTALL_PRF_DIR = $$INSTALL_DIR/$$INSTALL_PRF_PATH

# Defines directories where the installed version of Sofa is
equals(USING_INSTALL, true) {
	SOFA_INSTALL_INC_DIR = $$SOFA_INSTALL_DIR/$$INSTALL_INC_PATH
	SOFA_INSTALL_LIB_DIR = $$SOFA_INSTALL_DIR/$$INSTALL_LIB_PATH
} else {
	SOFA_INSTALL_INC_DIR = $$ROOT_SRC_DIR
}

########################################################################
# Load SOFA-specific configuration
########################################################################

load($$FEATURES_DIR/config-pre)

########################################################################
# Loading dependencies declarations
########################################################################

load($$rootDeclarationsFile(sofa-dependencies))

exists($$ROOT_BUILD_DIR/sofa-dependencies-local.prf) {
	load($$ROOT_BUILD_DIR/sofa-dependencies-local)
}
