<!-- 
 Move a MechanicalState with the mouse & keyboard.
 Keyboard/mouse interctions with the mechanicalState are managed by the Python script,
 thus demonstrating a way to create new specific components with SofaPython.
-->

<Node name="root" dt="0.005" showBehaviorModels="0" showCollisionModels="0" showMappings="0" showForceFields="0" >
	<Gravity name="G" gravity="10 0 0" />
	<CollisionPipeline name="pipeline" depth="6" verbose="0"/>
	<BruteForceDetection name="detection" />
	<CollisionResponse name="response" response="FrictionContact" />
	<LocalMinDistance name="proximity" alarmDistance="0.15" contactDistance="0.05" angleCone="0.0" />
	<FreeMotionAnimationLoop/>
	<LCPConstraintSolver />

	<Node name="Raptor">
		

           	<EulerImplicit name="odesolver" />
            	<CGLinearSolver iterations="10" name="linear solver" tolerance="1.0e-9" threshold="1.0e-9" />
		<SparseGrid n="5 5 10" fileTopology="mesh/raptor_8kp.obj" />
		<MechanicalObject name="mecaRaptor"  rotation="0 0 90"/>
		<PrecomputedConstraintCorrection recompute="true"/>
		<DiagonalMass massDensity="1" name="computed using mass density" />
            	<HexahedronFEMForceField name="FEM" youngModulus="1000000" poissonRatio="0.45" method="large" />
		<FixedConstraint  name="FixedConstraint" indices="0 1 2 18 19 20 59 58 57 96 97 98 135 136 137" />
		<Node name="VisualModel" >
			<OglModel name="RaptorVisualModel" fileMesh="mesh/raptor_35kp.obj" color="white"/> 
			<BarycentricMapping name="tongueMapping" input="@../mecaRaptor" output="@RaptorVisualModel" />
		</Node>

		<Node name="CollisionModel" >
		 	<MeshObjLoader filename="mesh/raptor_8kp.obj"  name="loader"/>
			<Mesh src="@loader" name="raptorVisualModel"  />
			<MechanicalObject src="@loader" name="raptorState"/>		
			<Triangle name="raptor" contactStiffness="100"/>
			<Line name="raptor" contactStiffness="100"/>	
			<Point name="raptor" contactStiffness="100"/>	
			<BarycentricMapping name="tongueMapping" input="@../mecaRaptor" output="@raptorState" mapForces="false"/>
		</Node>
	</Node>
	
	<!-- The PythonScriptController gathers events from input devices and populates the Mechanical state -->
	<Node name="Input">
		<PythonScriptController filename="keyboardControl.py" classname="KeyboardControl"/>
		<MechanicalObject template="Rigid" name="DOFs" position="0 0 0  0  0  0  1.0"/>
		<Node name="VisuAvatar" activated="false" >
			<OglModel name="Visual" fileMesh="mesh/sphere.obj" color="gray" scale="0.1"/>
			<RigidMapping object1="../.." object2="Visual" index="0"/>
		</Node>
		<Node name="RefModel">
			<MeshObjLoader filename="dental_instrument_centerline.obj"  name="loader"/>
			<Mesh src="@loader"  />
			<MechanicalObject src="@loader" name="instrumentCollisionState" ry="-180" rz="-90" dz="3.5" dx="-0.3" />
			<RigidMapping />
		</Node>
	</Node>

	<Node name="Instrument" >
		<EulerImplicitSolver name="ODE solver" rayleighStiffness="0.05" rayleighMass="1.0" />
		<CGLinearSolver name="linear solver" iterations="25" tolerance="1e-10" threshold="10e-10" /> 
		<MechanicalObject name="instrumentState" template="Rigid" />
		<UniformMass name="mass" totalmass="0.05" />
		<LCPForceFeedback activate="true" forceCoef="0.001"/> <!-- ADDED : Compute a force-feedback for the device -->
		<UncoupledConstraintCorrection/>
		<Node name="VisualModel" >
			<OglModel name="InstrumentVisualModel" fileMesh="dental_instrument.obj" color="1.0 0.2 0.2 1.0" ry="-180" rz="-90" dz="3.5" dx="-0.3"/>
			<RigidMapping name="MM->VM mapping" object1="instrumentState" object2="InstrumentVisualModel" />
		</Node>
		<Node name="CollisionModel" >
			<MeshObjLoader filename="dental_instrument_centerline.obj"  name="loader"/>
			<Mesh src="@loader" name="InstrumentCollisionModel" />
			<MechanicalObject src="@loader" name="instrumentCollisionState"  ry="-180" rz="-90" dz="3.5" dx="-0.3" />
			<Line name="instrument" contactStiffness="10" />
			<Point name="instrument" contactStiffness="10" /> 
			<RigidMapping name="MM->CM mapping" object1="instrumentState" object2="instrumentCollisionState" />
		</Node>
		<VectorSpringForceField  object1="Input/RefModel/instrumentCollisionState" object2="Instrument/CollisionModel/instrumentCollisionState" stiffness="10" viscosity="0" />
	</Node>  

</Node>
