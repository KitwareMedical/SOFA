//geometry shader for flat rendering

#extension GL_EXT_geometry_shader4 : enable

varying in vec2 texCoord[];
varying out vec2 texCoordFS;

varying out vec3 normalFS, lightDirFS, eyeVecFS;

uniform sampler2D textureColor;
uniform sampler2D textureCenters;

uniform vec4 Plane;
uniform vec4 Sphere;
uniform	float shrink_vol;


varying out vec4 toto;

void main(void)
{

	// get mask for volume clipping
 	float mask = texture2D(textureColor, texCoord[0].xy).a;

	// get center of volume 
 	vec3 center = texture2D(textureCenters, texCoord[0].xy).xyz;


	// compute if volume is clipped by plane
	float planeSide = dot(center,Plane.xyz) + Plane.w;

	vec3 v = center - Sphere.xyz;
	// compute if volume is clipped by sphere
	float distSph = dot(v,v) - (Sphere.w);

	// clipping test
	if ((mask >= 0.5) && (planeSide >= 0.0) && (distSph >= 0.0) )
	{
		vec4 center4;
		center4.xyz = center;
		center4.w = 1.0;

		float k = 1.0 - shrink_vol;

		vec4 pos0 = gl_PositionIn[0]*shrink_vol + center4*k;
		vec4 pos1 = gl_PositionIn[1]*shrink_vol + center4*k;
		vec4 pos2 = gl_PositionIn[2]*shrink_vol + center4*k;

		// compute normal to triangle
		vec3 v1 = pos1.xyz - pos0.xyz;
		vec3 v2 = pos2.xyz - pos0.xyz;
		normalFS  =  cross(v1,v2);

		// compute new position after modelView Transformation
		vec4 newPos =  gl_ModelViewMatrix * gl_PositionIn[0];
		// light position & direction
		vec4 lightPos =  gl_LightSource[0].position * gl_ModelViewMatrix;
		lightDirFS =  lightPos.xyz - newPos.xyz;
		// texture coordinate for color in fragment program
		texCoordFS = texCoord[0];

		// emit the triangle
		gl_Position = gl_ModelViewProjectionMatrix *  pos0;
		EmitVertex();
		gl_Position = gl_ModelViewProjectionMatrix *  pos1;
		EmitVertex();
		gl_Position = gl_ModelViewProjectionMatrix *  pos2;
		EmitVertex();


 	}
	EndPrimitive();

}
